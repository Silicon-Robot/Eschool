.container,
.header,
.main {
    margin: 0;
    padding: 0;
}

.container {
    display: flex;
    flex-direction: column;
    border: 1px solid #3157A0;
    box-sizing: border-box;
    /*filter: blur(4px);*/
    border-radius: 10px;
    min-width: 100%;
}

.header {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    min-width: 100%;
    border: 1px solid #000000;
    box-sizing: border-box;
    border-radius: 5px;
    /*margin-bottom: 150px;*/
}

.header .icon {
    font-size: 1em;
}

.header .icon * {
    color: #3157A0;
}

.header .title {
    text-align: center;
    font-family: Roboto;
    font-style: normal;
}

.newFaculteMain {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    width: 100%;
    /* visibility: hidden;
    height: 0; */
}

.newFaculteMain .main-header,
.newFaculteMain .main-footer * {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
}

.newFaculteMain .main-header .input-field {
    border: 1px solid #000000;
    border-radius: 0px;
    font-family: Roboto;
    font-style: normal;
}


/* .main .main-main
{
	display: flex;
	flex-direction: row;
	justify-content: flex-end;
	text-align: center;
} */

.newFaculteMain .main-footer .main-button {
    background: #28A08B;
    border-radius: 10px;
    border: none;
    font-family: Roboto;
    font-style: normal;
    font-weight: normal;
    color: white;
}


/*	 Mobile device	*/

@media screen and (max-width: 479px) {
    .header .icon {
        font-size: 1em;
    }
    .header .title {
        margin: 1% 0% 0% 17.5%;
        font-size: 1.2em;
        font-weight: 300;
    }
    .newFaculteMain {
        margin-top: 1em;
    }
    .newFaculteMain * {
        margin: 0.2em;
    }
    .newFaculteMain .main-header .input-field {
        height: 1.8em;
        font-size: 14px;
        width: 40%;
    }
    .newFaculteMain .main-footer .main-button {
        height: 1.7em;
        font-size: 1.2em;
        padding: 0em 0.5em 0em 0.5em;
    }
}


/*	Orther devices	*/

@media screen and (min-width: 480px) {
    .header .icon {
        font-size: 1em;
    }
    .header .title {
        margin-left: 35%;
        font-size: 1.8em;
        font-weight: 300;
    }
    .newFaculteMain {
        margin-top: 1em;
    }
    .newFaculteMain * {
        margin: 0.5em;
    }
    .newFaculteMain .main-header .input-field {
        height: 2em;
        font-size: 18px;
    }
    .newFaculteMain .main-footer .main-button {
        height: 1.8em;
        font-size: 1.7em;
        padding: 0em 0.5em 0em 0.5em;
    }
}

.blockTitle {
    text-align: center;
    background-color: #50E6EF;
    font-size: 2rem;
    font-weight: bold;
    /* color: white; */
}
 /*
                The object to be created in the personnel collection is: this.state.newPersonnel
                The object to be created in the coordonateur collection is:coordoUploadObject
                
                Both should be created in a transaction
                After the creation, fetch data back to the redux state so that the interface can refresh
            *//*
               // fetch('http:/localhost:3001/manage-personnel/new', {
               //           method: 'post',
               //           headers: {'Content-Type': 'application/json','x-access-token':window.localStorage.getItem("token")},
               //           body: JSON.stringify({
               //              matricule:newPersonnel.matricule,
               //              nom:newPersonnel.nom,
               //              prenom:newPersonnel.prenom,
               //              email: newPersonnel.mail,
               //              tel:newPersonnel.tel,
               //              nomRole:newPersonnel.role,
               //              startDate: Date.now()
               //           })
               //         })
               //         .then(response=>response.json())
               //         .then(data=>{
               //           if(data.message){
               //               console.log(data.message)
               //               let user = data.message
               //               const Personnel = {
               //                  idPersonnel:user._id,
               //                  matricule: user.matricule,
               //                  nom: user.nom,
               //                  prenom: user.prenom,
               //                  mail: user.email,
               //                  tel: user.tel,
               //                  role: user.role.nomRole
               //              }})
               //               this.props.dispatch({type: "CREATE_PERSONNEL", payload: Personnel})
               //           }
               //           else{
               //             console.log(data)
               //           }
               //         })
               //         .catch(error=>console.log(error)) */